/**
* @package html chess
* http://htmlchess.sourceforge.net/
* pieces types in this function are so defined: 0 = pawn, 1 = king, 2 = knight, 3 = bishop, 4 = rook, 5 = queen.
* colors are: zero for white, one for black.
*/
var	ocnf = this, fdegrad = math.pi / 180,
	oselectorcanvas = document.createelement("canvas"),
	ovalidcanvas = document.createelement("canvas"),
	oincheckcanvas = document.createelement("canvas"),
	oscene = new canvas3d.scene(this.osolidvwarea, this.i3dwidth, this.i3dheight, true),
	ocam = new canvas3d.camera(),
	iselectory = 0, iselectorx = 0, bpieceselected, oselectedpiece = null, bpieceshidden = false, bselectoract = true,
	amouseregions, ilastmouseregionx = -1, ilastmouseregiony = -1,
	bisrotating = false, imousedownx = 0, imousedowny = 0, bmouseisdown = false, bunhideordered = false,
	apieces = [], apiecescasing = [[],[],[],[],[],[]], arots = [0,0,-90,90,0,180,0,180,0,0,0,0],
	olight1 = new canvas3d.light(), olight2 = new canvas3d.light(), olight3 = new canvas3d.light(),
	oboardmesh = createmesh(this.tmp3dboard);

delete this.tmp3dboard;
oboardmesh.setforcedz(64);
oscene.addobject(oboardmesh);

function getelementpos(oelement) {
	var nelposx = -(document.body.scrollleft+document.documentelement.scrollleft), nelposy = -(document.body.scrolltop+document.documentelement.scrolltop);
	while (oelement && oelement.nodename != "body") {
		nelposx += oelement.offsetleft;
		nelposy += oelement.offsettop;
		oelement = oelement.offsetparent;
	}
	return {xaxis: nelposx, yaxis: nelposy};
}

// stand by selector
function selectorlistener(omsevnt1) {
	if (!omsevnt1) { omsevnt1 = window.event; }
	var opos = getelementpos(oscene.getinputlayer()), oregion = checkmouseregions(omsevnt1.clientx - opos.xaxis, omsevnt1.clienty - opos.yaxis);
	if (oregion) {
		showselector();
		showvalidmoves();
		showincheckpieces();
		bselectoract = true;
		canvas3d.removeevent(oscene.getinputlayer(), "mousemove", selectorlistener);
	}
}

function standbyselector() {
	if (bselectoract) {
		hideselector();
		hidevalidmoves();
		hideincheckpieces();
		bselectoract = false;
		canvas3d.addevent(oscene.getinputlayer(), "mousemove", selectorlistener);
	}
}
// end

function movezoom(bzoomin) {
	if (ocam = oscene.getactivecamera()) {
		var otarget = ocam.getlookat(), fdist = otarget.dist(ocam.getposition());
		standbyselector();
		hidepieces();
		ocam.moveforward(bzoomin ? (fdist - 50 < 40 ? fdist - 40 : 50) : -50);
		updatemouseregions();
		updateselector();
		updatevalidmoves();
		updateincheckpieces();
		showpieces();
	}
}

// setup polygons for board squares, used to check which piece mouse is hovering over
function updatemouseregions() {
	//var ocam = oscene.getactivecamera();

	var iposx, iposy, iposz, op1, op2, op3, op4, ioffsetx = ocnf.i3dwidth >> 1, ioffsety = ocnf.i3dheight >> 1, apaths = [];
	for (var nregx = 0; nregx < 8; nregx++) {
		apaths[nregx] = [];
		for (var nregy = 0; nregy < 8; nregy++) {
			iposx = -(nregx - 3) * 10;
			iposy = 0;
			iposz = (nregy - 4) * 10;

			op1 = ocam.project(ocam.transformpoint(new canvas3d.vec3(iposx, iposy, iposz)));
			op2 = ocam.project(ocam.transformpoint(new canvas3d.vec3(iposx + 10, iposy, iposz)));
			op3 = ocam.project(ocam.transformpoint(new canvas3d.vec3(iposx + 10, iposy, iposz + 10)));
			op4 = ocam.project(ocam.transformpoint(new canvas3d.vec3(iposx, iposy, iposz + 10)));

			apaths[nregx][nregy] = [
				[op1.x + ioffsetx, op1.y + ioffsety],
				[op2.x + ioffsetx, op2.y + ioffsety],
				[op3.x + ioffsetx, op3.y + ioffsety],
				[op4.x + ioffsetx, op4.y + ioffsety]
			];
		}
	}
	amouseregions = apaths;	
}

function checkmouseregions(imousex, imousey) {
	var bislast = false, bfound = false, iregiony = -1, iregionx = -1, octx = oselectorcanvas.getcontext("2d");

	if (ilastmouseregionx > -1 && ilastmouseregiony > -1 && checksinglemouseregion(octx, amouseregions[ilastmouseregionx][ilastmouseregiony], imousex, imousey)) { bislast = true; }
	if (!bislast) {
		for (var ichecky = 0; ichecky < 8 && !bfound; ichecky++) {
			for (var icheckx = 0; icheckx < 8 && !bfound; icheckx++) {
				if (checksinglemouseregion(octx, amouseregions[ichecky][icheckx], imousex, imousey)) {
					iregiony = ichecky;
					iregionx = icheckx;
					bfound = true;
				}
			}	
		}
	}
	return(iregiony > -1 && iregionx > -1 ? {regx: iregionx, regy: iregiony} : false);
}

function checksinglemouseregion(octx, aregion, nx, ny) {
	octx.beginpath();
	octx.moveto(aregion[0][0], aregion[0][1]);
	octx.lineto(aregion[1][0], aregion[1][1]);
	octx.lineto(aregion[2][0], aregion[2][1]);
	octx.lineto(aregion[3][0], aregion[3][1]);
	octx.closepath();
	return(octx.ispointinpath(nx, ny));
}

function moveselector(ideltax, ideltay) {
	var fangle = math.atan2(ocam.getposition().x,ocam.getposition().z) /  fdegrad;
	// four scenarios for how to move the selector, depending on camera angle
	if (fangle >= 135 || fangle <= -135) {
		iselectorx = iselectorx + ideltax & 7;
		iselectory = iselectory + ideltay & 7;
	} else if (fangle >= -45 && fangle <= 45) {
		iselectorx = iselectorx - ideltax & 7;
		iselectory = iselectory - ideltay & 7;
	} else if (fangle >= -135 && fangle <= -45) {
		iselectory = iselectory - ideltax & 7;
		iselectorx = iselectorx + ideltay & 7;
	} else if (fangle >= 45 && fangle <= 135) {
		iselectory = iselectory + ideltax & 7;
		iselectorx = iselectorx - ideltay & 7;
	}
	updateselector();
}

function hideselector() { oselectorcanvas.style.display = "none"; }
function showselector() { oselectorcanvas.style.display = "block"; }
function hidevalidmoves() { ovalidcanvas.style.display = "none"; }
function showvalidmoves() { ovalidcanvas.style.display = "block"; }
function hideincheckpieces() { oincheckcanvas.style.display = "none"; }
function showincheckpieces() { oincheckcanvas.style.display = "block"; }

function hidepieces() {
	if (!bpieceshidden) {
		for (var ihide = 0; ihide < apieces.length; ihide++) { apieces[ihide].mesh.hide(); }
		bpieceshidden = true;
	}
}

function showpieces() {
	if (bpieceshidden) {
		for (var ishow = 0; ishow < apieces.length; ishow++) { apieces[ishow].mesh.show(); }
		bpieceshidden = false;
	}
}

function updateselector() {
	var ioffsetx = ocnf.i3dwidth >> 1, ioffsety = ocnf.i3dheight >> 1, octx = oselectorcanvas.getcontext("2d");

	octx.clearrect(0,0,ocnf.i3dwidth,ocnf.i3dheight);

	// draw active selector square
	makeregionpath(octx, iselectorx, iselectory);
	octx.fillstyle = "rgba(255,255,0,0.5)";
	octx.fill();

	if (bpieceselected) {
		// draw border around selected square
		makeregionpath(octx, oselectedpiece.posx, oselectedpiece.posy);
		octx.linewidth = 2;
		octx.strokestyle = "rgba(255,0,0,1)";
		octx.stroke();
	}
}

function makeregionpath(octx, nmakex, nmakey) {
	var aregion = amouseregions[nmakey][nmakex];
	octx.beginpath();
	octx.moveto(aregion[0][0], aregion[0][1]);
	octx.lineto(aregion[1][0], aregion[1][1]);
	octx.lineto(aregion[2][0], aregion[2][1]);
	octx.lineto(aregion[3][0], aregion[3][1]);
	octx.closepath();
}

function updatevalidmoves() {
	var octx = ovalidcanvas.getcontext("2d");
	octx.clearrect(0, 0, ocnf.i3dwidth, ocnf.i3dheight);
	octx.fillstyle = "rgba(0,255,0,0.2)";

	if (!oselectedpiece) { return; }

	for (var ivalidy = 0; ivalidy < 8; ivalidy++) {
		for (var ivalidx = 0; ivalidx < 8; ivalidx++) {
			if (ocnf.isvalidmove(oselectedpiece.posx, oselectedpiece.posy, ivalidx, ivalidy)) {
				makeregionpath(octx, ivalidx, ivalidy);
				octx.fill();
			}
		}	
	}
}

function updateincheckpieces() {
	var oincheck = oincheckcanvas.getcontext("2d");
	oincheck.clearrect(0,0,ocnf.i3dwidth,ocnf.i3dheight);
	oincheck.fillstyle = "rgba(0,0,255,0.2)";
	for (var isquare = 0; isquare < ocnf.athreats.length; isquare++) {
		ithrtndsq = ocnf.athreats[isquare]
		makeregionpath(oincheck, ithrtndsq % 10 - 1, (ithrtndsq - ithrtndsq % 10) / 10 - 2);
		oincheck.fill();
	}
}

// removes a piece from the board
function removepiece(opiece) {
	var ipiece;
	for (var ipieceid = 0; ipieceid < apieces.length; ipieceid++) {
		ipiece = apieces[ipieceid];
		if (ipiece === opiece) { array.prototype.push.apply(apiecescasing[ipiece.type], apieces.splice(ipieceid, 1)); }
	}
	oscene.removeobject(opiece.mesh);
}

function piecebycoords(nhasx, nhasy) {
	for (var iid = 0; iid < apieces.length; iid++) {
		if (apieces[iid].posy === nhasy && apieces[iid].posx === nhasx) { return(apieces[iid]); }
	}
}

function movepieceto(opiece, ntox, ntoy) {
	var opos = getboardpos(ntox, ntoy);
	opiece.mesh.setposition(new canvas3d.vec3(opos.posy, 0, opos.posx));
	opiece.posx = ntox;
	opiece.posy = ntoy;
}

function getboardpos(posx, posy) { return {posx: posx * 10 - 35, posy: 35 - posy * 10}; }

function clearpieceselection() {
	oselectedpiece = null;
	bpieceselected = false;
	updateselector();
	updatevalidmoves();
}

function snapclick(omsevnt2) {
	if (!omsevnt2) { omsevnt2 = window.event; }
	imousedownx = omsevnt2.clientx;
	imousedowny = omsevnt2.clienty;
	bmouseisdown = true;
}

function snapdomscroll(omsevnt3) {
	if (!omsevnt3) { omsevnt3 = window.event; }
	if (!omsevnt3.shiftkey) { return; }
	if (omsevnt3.detail) { omsevnt3.wheeldelta = omsevnt3.detail * -40; } 

	hidepieces();
	hideselector();
	hidevalidmoves();
	ocam.setscale(omsevnt3.wheeldelta > 0 ? ocam.getscale() * 1.5 : ocam.getscale() / 1.5)

	if (!bunhideordered) {
		settimeout( function() {
			showpieces();

			bisrotating = false;
			oscene.setdirty(true);

			updatemouseregions();
			updateselector();
			updatevalidmoves();

			showselector();
			showvalidmoves();
			bunhideordered = false;
		}, 100);
		bunhideordered = true;
	}

	if (omsevnt3.preventdefault) { omsevnt3.preventdefault(); } else { omsevnt3.returnvalue = false; }
}

function snapmsbtnup(omsevnt4) {
	if (!omsevnt4) { omsevnt4 = window.event; }
	bmouseisdown = false;

	if (bisrotating) {
		showpieces();

		bisrotating = false;
		oscene.setdirty(true);

		updatemouseregions();
		updateselector();
		updatevalidmoves();
		updateincheckpieces();

		settimeout(function() { showselector(); showvalidmoves(); showincheckpieces(); }, 10);
	} else {
		var opos = getelementpos(oscene.getinputlayer());
		imousedownx = omsevnt4.clientx - opos.xaxis;
		imousedowny = omsevnt4.clienty - opos.yaxis;
		var oregion = checkmouseregions(omsevnt4.clientx - opos.xaxis, omsevnt4.clienty - opos.yaxis);
		if (oregion) { ocnf.makeselection(iselectory * 10 + iselectorx + 21, true); }
	}
}

function snapmsmove(omsevnt5) {
	if (!omsevnt5) { omsevnt5 = window.event; }
	if (bmouseisdown) {
		hidepieces();
		hideselector();
		hidevalidmoves();
		hideincheckpieces();

		bisrotating = true;

		var	imousex = omsevnt5.clientx, imousey = omsevnt5.clienty, fdeltax = (imousex - imousedownx) / 3, fdeltay = -((imousey - imousedowny) / 3),
			// save the old camera position
			ooldcampos = new canvas3d.vec3(ocam.getposition().x, ocam.getposition().y, ocam.getposition().z);

		// pitch the camera, but if we're not too low or if we're moving the camera up
		ocam.pitcharoundtarget(fdeltay);
		if (!((ocam.getposition().y > 15 || fdeltay < 0) && (ocam.getposition().y < 100 || fdeltay > 0))) { ocam.setposition(ooldcampos); }

		ocam.yawaroundtarget(fdeltax);
		ocam.lookat(ocam.getlookat(), oscene.getupvector());
		ocam.updaterotationmatrix();
		imousedownx = omsevnt5.clientx;
		imousedowny = omsevnt5.clienty;

	} else {
		var opos = getelementpos(oscene.getinputlayer()), oregion = checkmouseregions(omsevnt5.clientx - opos.xaxis, omsevnt5.clienty - opos.yaxis);
		if (oregion) {
			var bnewregion = false;
			if (iselectory !== oregion.regy || iselectorx !== oregion.regx) { bnewregion = true; }

			iselectorx = oregion.regx;
			iselectory = oregion.regy;

			if (bnewregion) { updateselector(); }
		}
	}
}

function snapkeydown(okeyevnt2) {
	if (!ocnf.bkeyctrl) { return; }
	if (!okeyevnt2) { okeyevnt2 = window.event; }
	var ikeycode = okeyevnt2.keycode;
	if (ikeycode === 107) { movezoom(true); } // "+"
	else if (ikeycode === 109) { movezoom(false); } // "-"
}


function snapkeypress(okeyevnt3) {
	if (!ocnf.bkeyctrl) { return; }
	if (!okeyevnt3) { okeyevnt3 = window.event; }
	var ikeycode = okeyevnt3.charcode;
	switch (ikeycode) {
		case 49: moveselector(-1,1); break; // numpad 1
		case 50: moveselector(-1,0); break; // numpad 2
		case 51: moveselector(-1,-1); break; // numpad 3
		case 52: moveselector(0,1); break; // numpad 4
		case 53: ocnf.makeselection(iselectory * 10 + iselectorx + 21, true); break; // numpad 5
		case 54: moveselector(0,-1); break; // numpad 6
		case 55: moveselector(1,1); break; // numpad 7
		case 56: moveselector(1,0); break; // numpad 8
		case 57: moveselector(1,-1); break; // numpad 9
	}
}

function createmesh(omeshdata) {
	var omesh = new canvas3d.mesh();
	omesh._bshading = true;
	omesh._bwire = false;
	omesh._bfill = true;
	omesh._bzsort = true;
	omesh._bbackfacecull = true;
	omesh._btexture = false;
	omesh._btextureshading = false;
	omesh.setmeshdata(omeshdata, oscene);
	return(omesh);
}

function setpiececolor(opiecemesh, ncolor) {
	for (var imat = 0; imat < opiecemesh._amaterials.length; imat++) {
		if (ncolor === 0) {
			opiecemesh._amaterials[imat].r = 220;
			opiecemesh._amaterials[imat].g = 220;
			opiecemesh._amaterials[imat].b = 220;
		} else {
			opiecemesh._amaterials[imat].r = 100;
			opiecemesh._amaterials[imat].g = 80;
			opiecemesh._amaterials[imat].b = 80;
		}
	}
}

function getpiece(ntype, flagcolor, nputx, nputy) {
	var onewpiece, nrot = arots[flagcolor | ntype << 1], opos = getboardpos(nputx, nputy);
	if (apiecescasing[ntype].length > 0) {
		onewpiece = apiecescasing[ntype].pop();
		if (onewpiece.color !== flagcolor) {
			setpiececolor(onewpiece.mesh, flagcolor);
			onewpiece.color = flagcolor;
		}
		onewpiece.posx = nputx;
		onewpiece.posy = nputy;
	} else {
		var onewmesh = createmesh(new ocnf.apieceslab[ntype]());
		setpiececolor(onewmesh, flagcolor);
		onewpiece = {
			mesh: onewmesh,
			color: flagcolor,
			type: ntype,
			posx: nputx,
			posy: nputy,
		};
	}
	if (nrot !== 0) { onewpiece.mesh.setrotation(new canvas3d.vec3(0, nrot * fdegrad, 0)); }
	onewpiece.mesh.setposition(new canvas3d.vec3(opos.posy, 0, opos.posx));
	apieces.push(onewpiece);
	oscene.addobject(onewpiece.mesh);
	return(onewpiece);
}

function setupgame() {
	var itypeorcolor;
	for (var ipiecey = 0; ipiecey < 8; ipiecey++) {
		for (var ipiecex = 0; ipiecex < 8; ipiecex++) {
			itypeorcolor = ocnf.aboard[ipiecey * 10 + ipiecex + 21];
			if (itypeorcolor > 0) {
				getpiece(itypeorcolor - 1 & 7, itypeorcolor >> 3 & 1, ipiecex, ipiecey);
			}
		}
	}
}

function resetcamera() {
	var nsize = ocnf.i3dwidth < ocnf.i3dheight ? ocnf.i3dwidth : ocnf.i3dheight; // min 200, max 900
	ocam.setposition(new canvas3d.vec3(ocnf.bblackside ? -50 : 50, nsize > 900 ? 45 : math.round((nsize * (nsize * 67 - 118700) + 56340000) / 84000), 0));
	ocam.lookat(new canvas3d.vec3(0,0,0), oscene.getupvector());
	ocam.updaterotationmatrix();
}

function updatecamera() {
	hidepieces();
	standbyselector();
	resetcamera();
	updatemouseregions();
	updateselector();
	updatevalidmoves();
	updateincheckpieces();
	showpieces();
}

this.osolidvwarea.style.width = this.i3dwidth + "px";
this.osolidvwarea.style.height = this.i3dheight + "px";

oincheckcanvas.width = this.i3dwidth;
oincheckcanvas.height = this.i3dheight;
oincheckcanvas.style.width = this.i3dwidth + "px";
oincheckcanvas.style.height = this.i3dheight + "px";
oincheckcanvas.style.zindex = 65;
oincheckcanvas.style.position = "absolute";

ovalidcanvas.width = this.i3dwidth;
ovalidcanvas.height = this.i3dheight;
ovalidcanvas.style.width = this.i3dwidth + "px";
ovalidcanvas.style.height = this.i3dheight + "px";
ovalidcanvas.style.zindex = 66;
ovalidcanvas.style.position = "absolute";

oselectorcanvas.width = this.i3dwidth;
oselectorcanvas.height = this.i3dheight;
oselectorcanvas.style.width = this.i3dwidth + "px";
oselectorcanvas.style.height = this.i3dheight + "px";
oselectorcanvas.style.zindex = 67;
oselectorcanvas.style.position = "absolute";

olight1.setposition(new canvas3d.vec3(0,30,0));
olight1.setintensity(0.8);
oscene.addlight(olight1);

olight2.setposition(new canvas3d.vec3(100,30,100));
olight2.setintensity(0.3);
oscene.addlight(olight2);

olight3.setposition(new canvas3d.vec3(-100,30,-100));
olight3.setintensity(0.3);
oscene.addlight(olight3);

setupgame();

ocam.setscale(18);
ocam.setfov(110);
ocam.setfocaldistance(50);

ocam.setreversex(true);

resetcamera();

oscene.setactivecamera(ocam);

//oscene.setupvector(new canvas3d.vec3(0,-1,0));

this.osolidvwarea.appendchild(oselectorcanvas);
this.osolidvwarea.appendchild(ovalidcanvas);
this.osolidvwarea.appendchild(oincheckcanvas);

canvas3d.addevent(oscene.getinputlayer(), "mousedown", snapclick);
canvas3d.addevent(document.body, "dommousescroll", snapdomscroll);
canvas3d.addevent(document.body, "mouseup", snapmsbtnup);
canvas3d.addevent(document.body, "mousemove", snapmsmove);
canvas3d.addevent(document, "keypress", snapkeypress);
canvas3d.addevent(document, "keydown", snapkeydown);
oscene.begin();
updatemouseregions();
updateincheckpieces();
this.bsolidview = true;

return {
	show: function() {
		ocnf.osolidvwarea.appendchild(oscene._odrawcanvas);
		ocnf.osolidvwarea.appendchild(oscene._oinputoverlay);
		ocnf.osolidvwarea.appendchild(oselectorcanvas);
		ocnf.osolidvwarea.appendchild(ovalidcanvas);
		ocnf.osolidvwarea.appendchild(oincheckcanvas);
		oscene.addobject(oboardmesh);
		setupgame();
		canvas3d.addevent(oscene.getinputlayer(), "mousedown", snapclick);
		canvas3d.addevent(document.body, "dommousescroll", snapdomscroll);
		canvas3d.addevent(document.body, "mouseup", snapmsbtnup);
		canvas3d.addevent(document.body, "mousemove", snapmsmove);
		canvas3d.addevent(document, "keypress", snapkeypress);
		canvas3d.addevent(document, "keydown", snapkeydown);
		updatecamera();
		oscene.begin();
		ocnf.bsolidview = true;
	},
	hide: function() {
		canvas3d.removeevent(oscene.getinputlayer(), "mousedown", snapclick);
		canvas3d.removeevent(document.body, "dommousescroll", snapdomscroll);
		canvas3d.removeevent(document.body, "mouseup", snapmsbtnup);
		canvas3d.removeevent(document.body, "mousemove", snapmsmove);
		canvas3d.removeevent(document, "keypress", snapkeypress);
		canvas3d.removeevent(document, "keydown", snapkeydown);
		oscene.end();
		ocnf.osolidvwarea.removechild(oincheckcanvas);
		ocnf.osolidvwarea.removechild(ovalidcanvas);
		ocnf.osolidvwarea.removechild(oselectorcanvas);
		oscene.removeallobjects();
		for (var istop = apieces.length; istop > 0; istop--) {
			opiece = apieces[istop - 1];
			apiecescasing[opiece.type].push(apieces.pop());
		}
		ocnf.osolidvwarea.removechild(oscene._oinputoverlay);
		ocnf.osolidvwarea.removechild(oscene._odrawcanvas);
		ocnf.osolidvwarea.style.width = "0";
		ocnf.bsolidview = false;
	},
	update: function(bupdatecamera) {
		clearpieceselection();
		for (var icase = apieces.length; icase > 0; icase--) {
			opiece = apieces[icase - 1];
			apiecescasing[opiece.type].push(apieces.pop());
			oscene.removeobject(opiece.mesh);
		}
		setupgame();
		if (bupdatecamera) { updatecamera(); }
		else {
			updatevalidmoves();
			updateincheckpieces();
		}
	},
	selectpiece: function(nsquareid, bunselect, bemph) {
		iselectorx = nsquareid % 10 - 1;
		iselectory = (nsquareid - nsquareid % 10) / 10 - 2;

		if (bunselect) {
			for (var isel = 0; isel < apieces.length; isel++) {
				if (apieces[isel].posy === iselectory && apieces[isel].posx === iselectorx) {
					opiece = apieces[isel];
					oselectedpiece = apieces[isel];
					bpieceselected = true;
				}
			}
			if (bemph) {
				updateselector();
				updatevalidmoves();
			} else {
				standbyselector();
				var osctx = oselectorcanvas.getcontext("2d"), ovctx = ovalidcanvas.getcontext("2d");
				osctx.clearrect(0,0,ocnf.i3dwidth,ocnf.i3dheight);
				ovctx.clearrect(0,0,ocnf.i3dwidth,ocnf.i3dheight);
			}
		} else {
			clearpieceselection();
			updateincheckpieces();
		}
	},
	updatesize: function() {
		ocnf.osolidvwarea.style.width = ocnf.i3dwidth + "px";
		ocnf.osolidvwarea.style.height = ocnf.i3dheight + "px";

		oselectorcanvas.width = ocnf.i3dwidth;
		oselectorcanvas.height = ocnf.i3dheight;
		oselectorcanvas.style.width = ocnf.i3dwidth + "px";
		oselectorcanvas.style.height = ocnf.i3dheight + "px";

		ovalidcanvas.width = ocnf.i3dwidth;
		ovalidcanvas.height = ocnf.i3dheight;
		ovalidcanvas.style.width = ocnf.i3dwidth + "px";
		ovalidcanvas.style.height = ocnf.i3dheight + "px";

		oincheckcanvas.width = ocnf.i3dwidth;
		oincheckcanvas.height = ocnf.i3dheight;
		oincheckcanvas.style.width = ocnf.i3dwidth + "px";
		oincheckcanvas.style.height = ocnf.i3dheight + "px";

		oscene.setdimensions(ocnf.i3dwidth, ocnf.i3dheight);

		updatecamera();
	},
	move: function(bbackward, nstartpt, nendpt, ntarget, npromopiece) {
		var nstartx = nstartpt % 10 - 1, nstarty = (nstartpt - nstartpt % 10) / 10 - 2, nendx = nendpt % 10 - 1, nendy = (nendpt - nendpt % 10) / 10 - 2;
		if (bbackward) {
			var oselpiece = piecebycoords(nendx, nendy);
			if (ntarget) { getpiece(ntarget - 1 & 7, ntarget >> 3 & 1, nendx, nendy); }
			else if (oselpiece.type === 0 && (nstartpt + nendpt & 1)) { // en passant
				getpiece(0, oselpiece.color ^ 1, nendx, nstarty);
			} else if (oselpiece.type === 1 && (nendpt - nstartpt + 2 | 4) === 4) { // castling
				var chosenrook = piecebycoords(nendpt - nstartpt + 8 >> 1, nendy);
				movepieceto(chosenrook, 30 - nendpt + nstartpt >> 2 & 7, nendy);
				chosenrook.posx = 30 - nendpt + nstartpt >> 2 & 7;
			}
			if (npromopiece) {
				removepiece(oselpiece);
				getpiece(0, nendy >> 2 ^ 1, nstartx, nstarty);
			} else { movepieceto(oselpiece, nstartx, nstarty); }
		} else {
			var oselpiece = piecebycoords(nstartx, nstarty);
			if (ntarget) { removepiece(piecebycoords(nendx, nendy)); }
			else if (oselpiece.type === 0 && (nstartpt + nendpt & 1)) { // en passant
				removepiece(piecebycoords(nendx, nstarty));
			} else if (oselpiece.type === 1 && (nendpt - nstartpt + 2 | 4) === 4) { // castling
				var chosenrook = piecebycoords(30 - nendpt + nstartpt >> 2 & 7, nendy);
				movepieceto(chosenrook, nendpt - nstartpt + 8 >> 1, nendy);
				chosenrook.posx = nendpt - nstartpt + 8 >> 1;
			}
			if (npromopiece) {
				removepiece(oselpiece);
				oselpiece = getpiece(npromopiece - 1 & 7, nendy >> 2 ^ 1, nendx, nendy); }
			else { movepieceto(oselpiece, nendx, nendy); }
		}
		updateincheckpieces();
	},
	updateview: updatecamera
};
