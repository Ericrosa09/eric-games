/*
 * javascript/canvas textured 3d renderer v0.3.1
 * copyright (c) 2008 jacob seidelin, cupboy@gmail.com
 * this software is free to use for non-commercial purposes. for anything else, please contact the author.
 * this is a version modified by stefano gioffre'.
 */

canvas3d.scene = function(ocontainer, iwidth, iheight, bobjectcanvas) {
	this._ocontainer = ocontainer;
	this._iwidth = iwidth;
	this._iheight = iheight;
	var ocanvas = this._odrawcanvas = document.createelement("canvas");
	this._odrawcontext = ocanvas.getcontext("2d");
	canvas3d.addevent(ocanvas, "selectstart", function() { return(false); });
	ocanvas.style.position = "absolute";

	this._odrawcanvas.width = iwidth;
	this._odrawcanvas.height = iheight;
	this._odrawcanvas.style.width = iwidth + "px";
	this._odrawcanvas.style.height = iheight + "px";

	ocontainer.appendchild(this._odrawcanvas);

	this._oactivecamera = null;

	this._aobjects = [];

	this._brunning = false;

	// if true, each object will be rendered on its own canvas
	this._buseobjectcanvas = bobjectcanvas;

	this._bmouserotate = true;
	this._bmouserotatey = true;
	this._bmouserotatex = true;

	this._oupvector = new canvas3d.vec3(0,1,0);

	this._oambientlight = {r:50,g:50,b:50};

	this._bdrawlights = false;
	this._alights = [];

	this._imaxz = 10000000;

	var oinputoverlay = this._oinputoverlay = document.createelement("span");
	oinputoverlay.style.width = iwidth + "px";
	oinputoverlay.style.height = iheight + "px";
	oinputoverlay.style.zindex = this._imaxz + 10000000;
	oinputoverlay.style.position = "absolute";
	this._ocontainer.appendchild(oinputoverlay);

	canvas3d.addevent(oinputoverlay, "selectstart", function() { return(false); });

};

canvas3d.scene.prototype.getinputlayer = function() { return(this._oinputoverlay); };

canvas3d.scene.prototype.setupvector = function(ovec) { this._oupvector = ovec; };

canvas3d.scene.prototype.getupvector = function() { return(this._oupvector); };

canvas3d.scene.prototype.getambientlight = function() {	return(this._oambientlight); };

canvas3d.scene.prototype.zoomcamera = function(fzoom) { this.getactivecamera().moveforward(fzoom); };

canvas3d.scene.prototype.getobjects = function() { return(this._aobjects); };

canvas3d.scene.prototype.addobject = function(obj) {
	if (this._buseobjectcanvas) {
		var oobjectcanvas = document.createelement("canvas");
		if (!oobjectcanvas.getcontext) return;
	
		var oobjectcontext = oobjectcanvas.getcontext("2d");
	
		canvas3d.addevent(oobjectcanvas, "selectstart", function() { return(false); });
	
		oobjectcanvas.width = this._iwidth;
		oobjectcanvas.height = this._iheight;
	
		oobjectcanvas.style.width = this._iwidth + "px";
		oobjectcanvas.style.height = this._iheight + "px";

		oobjectcanvas.style.position = "absolute";
		this._ocontainer.appendchild(oobjectcanvas);

		this._aobjects.push({
			"canvas": oobjectcanvas,
			"context": oobjectcontext,
			"object": obj
			
		});
	} else {
		this._aobjects.push({ "object": obj });
	}
	obj.setscene(this);
	this.setdirty(true);
	return(obj);
};
/*
canvas3d.scene.prototype.setwidth = function(iwidth) {
	for (var icnvsobj = 0; icnvsobj < this._aobjects.length; icnvsobj++) {
		if (this._aobjects[icnvsobj].hasownproperty("canvas")) {
			this._aobjects[icnvsobj].canvas.width = iwidth;
			this._aobjects[icnvsobj].canvas.style.width = iwidth + "px";
		}
	}
	this._iwidth = iwidth;
	this._odrawcanvas.width = iwidth;
	this._odrawcanvas.style.width = iwidth + "px";
	this._oinputoverlay.style.width = iwidth + "px";

};

canvas3d.scene.prototype.setheight = function(iheight) {
	for (var icnvsobj = 0; icnvsobj < this._aobjects.length; icnvsobj++) {
		if (this._aobjects[icnvsobj].hasownproperty("canvas")) {
			this._aobjects[icnvsobj].canvas.height = iheight;
			this._aobjects[icnvsobj].canvas.style.height = iheight + "px";
		}
	}
	this._iheight = iheight;
	this._odrawcanvas.height = iheight;
	this._odrawcanvas.style.height = iheight + "px";
	this._oinputoverlay.style.height = iheight + "px";
};
*/
canvas3d.scene.prototype.setdimensions = function(iwidth, iheight) {
	for (var icnvsobj = 0; icnvsobj < this._aobjects.length; icnvsobj++) {
		if (this._aobjects[icnvsobj].hasownproperty("canvas")) {
			this._aobjects[icnvsobj].canvas.width = iwidth;
			this._aobjects[icnvsobj].canvas.height = iheight;
			this._aobjects[icnvsobj].canvas.style.width = iwidth + "px";
			this._aobjects[icnvsobj].canvas.style.height = iheight + "px";
		}
	}
	this._iwidth = iwidth;
	this._iheight = iheight;
	this._odrawcanvas.height = iheight;
	this._odrawcanvas.width = iwidth;
	this._odrawcanvas.style.width = iwidth + "px";
	this._odrawcanvas.style.height = iheight + "px";
	this._oinputoverlay.style.width = iwidth + "px";
	this._oinputoverlay.style.height = iheight + "px";
};

canvas3d.scene.prototype.removeobject = function(oobject) {
	for (var i=0;i<this._aobjects.length;i++) {
		if (this._aobjects[i].object === oobject) {
			if (this._buseobjectcanvas) {
				this._ocontainer.removechild(this._aobjects[i].canvas);
			}
			this._aobjects.splice(i, 1);
		}
	}
};

canvas3d.scene.prototype.removeallobjects = function() {
	if (this._buseobjectcanvas) {
		for (var i=0;i<this._aobjects.length;i++) {
			this._ocontainer.removechild(this._aobjects[i].canvas);
		}
	}
	this._aobjects.splice(0);
};

canvas3d.scene.prototype.addlight = function(olight) {
	olight.setscene(this);
	return(this._alights.push(olight));
};

canvas3d.scene.prototype.getlights = function() { return(this._alights); };

canvas3d.scene.prototype.clearobjects = function() { this._aobjects.splice(0); };

canvas3d.scene.prototype.setactivecamera = function(ocam) { this._oactivecamera = ocam; };

canvas3d.scene.prototype.getactivecamera = function() { return(this._oactivecamera); };

canvas3d.scene.prototype.begin = function() {
	this._brunning = true;
	this.getactivecamera().setdirty(true);
	this.drawall();
	var me = this;
	this._iinterval = setinterval(function() { me.drawall(); }, 1000 / 30);
};

canvas3d.scene.prototype.end = function() {
	this._brunning = false;
	clearinterval(this._iinterval);
};

canvas3d.scene.prototype.setdirty = function(bdirty) {
	this._bdirty = bdirty;
};

canvas3d.scene.prototype.getdirty = function() { return(this._bdirty); };

canvas3d.scene.prototype.getwidth = function() { return(this._iwidth); };

canvas3d.scene.prototype.getheight = function() { return(this._iheight); };

canvas3d.scene.prototype.drawall = function() {
	if (!this._brunning) return;

	var ocam = this.getactivecamera();

	var ioffsetx = math.floor(this._iwidth / 2);
	var ioffsety = math.floor(this._iheight / 2);

	var aobjects = this._aobjects;
	var bcamdirty = ocam.getdirty();
	var iobjdrawn = 0;

	var bobjdirty = false;
	for (var c=0;c<aobjects.length;c++) {
		if (aobjects[c].object.getdirty()) {
			bobjdirty = true;
		}
	}

	if (bcamdirty || this.getdirty() || bobjdirty) {
		if (bcamdirty || this.getdirty()) {
			this._odrawcontext.clearrect(0,0,this._iwidth,this._iheight);
		}

		var aobjpos = [];
		for (var c=0;c<aobjects.length;c++) {
			if (aobjects[c].object.getsortposition)
				var opos = aobjects[c].object.getsortposition();
			else
				var opos = aobjects[c].object.getposition();

			var oobjectpos = ocam.transformpoint(opos);
			aobjpos[c] = [aobjects[c], oobjectpos.z];
		}

		var asortobj = aobjpos.sort(
			function(a,b) {
				return(b[1] - a[1]);
			}
		);
		aobjects = asortobj;

		for (var c=0;c<aobjects.length;c++) {
			var oobject = aobjects[c][0];
			if (oobject.object.isvisible()) {
				if (this._buseobjectcanvas) {
					if (bcamdirty || this.getdirty() || oobject.object.getdirty()) {
						if (oobject.object.getforcedz() > -1) {
							oobject.canvas.style.zindex = oobject.object.getforcedz();
						} else {
							var oobjectpos = ocam.transformpoint(oobject.object.getposition());
							oobject.canvas.style.zindex = 10000000 - math.round(oobjectpos.z*100);
						}
						oobject.context.clearrect(0,0,this._iwidth,this._iheight);
						if (oobject.object.draw(oobject.context, ioffsetx, ioffsety)) {
							iobjdrawn++;
						}
						oobject.canvas.style.display = "block";
					}
				} else {
					if (bcamdirty || this.getdirty()) {
						if (oobject.object.draw(this._odrawcontext, ioffsetx, ioffsety)) {
							iobjdrawn++;
						}
					}
				}
			} else {
				if (this._buseobjectcanvas) {
					oobject.canvas.style.display = "none";
				}
			}
		}
	}

	if (this._bdrawlights) {
		for (var c=0;c<this._alights.length;c++) {
			var olight = this._alights[c];
			olight.draw(this._olightcontext, ioffsetx, ioffsety);
		}
	}

	for (var c=0;c<this._alights.length;c++) {
		this._alights[c].setdirty(false);
	}
	ocam.setdirty(false);
	this.setdirty(false);

};
