/*
 * javascript/canvas textured 3d renderer v0.3
 * copyright (c) 2008 jacob seidelin, cupboy@gmail.com
 * this software is free to use for non-commercial purposes. for anything else, please contact the author.
 * this is a version modified by stefano gioffre'.
 */

canvas3d.vec3 = function(vx, vy, vz) {
	this.x = vx;
	this.y = vy;
	this.z = vz;
}

canvas3d.vec3.prototype.set = function(vx, vy, vz) {
	this.x = vx;
	this.y = vy;
	this.z = vz;
}

canvas3d.vec3.prototype.addvector = function(v) {
	this.x += v.x;
	this.y += v.y;
	this.z += v.z;
	return this;
}

canvas3d.vec3.prototype.multiply = function(fscalar) {
	this.x *= fscalar;
	this.y *= fscalar;
	this.z *= fscalar;
	return this;
}

canvas3d.vec3.prototype.subvector = function(v) {
	this.x -= v.x;
	this.y -= v.y;
	this.z -= v.z;
	return this;
}

canvas3d.vec3.prototype.returnadd = function(v) {
	return new canvas3d.vec3(this.x + v.x, this.y + v.y, this.z + v.z);
}

canvas3d.vec3.prototype.returnsub = function(v) {
	return new canvas3d.vec3(this.x - v.x, this.y - v.y, this.z - v.z);
}

canvas3d.vec3.prototype.clone = function() {
	return new canvas3d.vec3(this.x, this.y, this.z);
}

canvas3d.vec3.prototype.dot = function(v) {
	return ((this.x * v.x) + (this.y * v.y) + (this.z * v.z));
}

canvas3d.vec3.prototype.cross = function(v) {
	var vx = v.x;
	var vy = v.y;
	var vz = v.z;
	return new canvas3d.vec3((this.y * vz) - (this.z * vy), (this.z * vx) - (this.x * vz), (this.x * vy) - (this.y * vx));
}

canvas3d.vec3.prototype.length = function() {
	return math.sqrt((this.x * this.x) + (this.y * this.y) + (this.z * this.z));
}

canvas3d.vec3.prototype.unit = function() {
	var l = 1/math.sqrt((this.x * this.x) + (this.y * this.y) + (this.z * this.z));
	return new canvas3d.vec3(this.x * l, this.y * l, this.z * l);
}

canvas3d.vec3.prototype.rotatex = function(a) {
	var ry = this.y;
	var rz = this.z;
	var c = math.cos(a);
	var s = math.sin(a);
	this.y = c * ry - s * rz;
	this.z = s * ry + c * rz;
}

canvas3d.vec3.prototype.rotatey = function(a) {
	var rx = this.x;
	var rz = this.z;
	var c = math.cos(a);
	var s = math.sin(a);
	this.x = c * rx - s * rz;
	this.z = s * rx + c * rz;
}

canvas3d.vec3.prototype.rotatez = function(a) {
	var rx = this.x;
	var ry = this.y;
	var c = math.cos(a);
	var s = math.sin(a);
	this.x = c * rx - s * ry;
	this.y = s * rx + c * ry;
}

canvas3d.vec3.prototype.dist = function(ovec) {
	var x = ovec.x - this.x;
	var y = ovec.y - this.y;
	var z = ovec.z - this.z;
	return math.sqrt(x*x + y*y + z*z);
}
