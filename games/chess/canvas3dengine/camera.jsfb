/*
 * javascript/canvas textured 3d renderer v0.3.1
 * copyright (c) 2008 jacob seidelin, cupboy@gmail.com
 * this software is free to use for non-commercial purposes. for anything else, please contact the author.
 * this is a version modified by stefano gioffre'.
 */

canvas3d.camera = function() {

	this._oposition = new canvas3d.vec3(0,0,0);

	this._osidevec = new canvas3d.vec3(1,0,0);
	this._oupvec = new canvas3d.vec3(0,1,0);
	this._ooutvec = new canvas3d.vec3(0,0,1);

	this._orotmat = new canvas3d.matrix3();

	this._bdirty = false;
	this._ffocal = 500;
	this._ffocaldistance = this._ffocal;

	this._breversex = false;
	this._breversey = false;

	this._btarget = true;

	this._iclipnear = 1;
	this._iclipfar = 10000000;

	this._fscale = 1;

	this._olookat = new canvas3d.vec3(0,0,0);

};

var proto = canvas3d.camera.prototype;

proto.getdirty = function() {
	return this._bdirty;
}

proto.setdirty = function(bdirty) {
	this._bdirty = bdirty;
}

proto.setposition = function(opos) {
	this._oposition.set(opos.x, opos.y, opos.z);
	this._bdirty = true;
}

proto.getposition = function() {
	return this._oposition;
}

proto.setscale = function(fscale) {
	this._fscale = fscale;
	this._bdirty = true;
}

proto.getscale = function() {
	return this._fscale;
}

proto.getside = function() {
	return this._osidevec;
}

proto.getup = function() {
	return this._oupvec;
}

proto.setup = function(ovec) {
	this._oupvec = ovec;
}

proto.getout = function() {
	return this._ooutvec;
}

proto.movesideways = function(d) {
	this._oposition.x += this._osidevec.x * d;
	this._oposition.y += this._osidevec.y * d;
	this._oposition.z += this._osidevec.z * d;
	this.setdirty(true);
}

proto.moveupwards = function(d) {
	this._oposition.x += this._oupvec.x * d;
	this._oposition.y += this._oupvec.y * d;
	this._oposition.z += this._oupvec.z * d;
	this.setdirty(true);
}

proto.moveforward = function(d) {
	this._oposition.x += this._ooutvec.x * d;
	this._oposition.y += this._ooutvec.y * d;
	this._oposition.z += this._ooutvec.z * d;
	this.setdirty(true);
}

// rotate around the camera's side axis with a target center point (uses camera target if otarget is null)
proto.pitcharoundtarget = function(ftheta, otarget) {
	var m = new canvas3d.matrix3();
	var opos = this.getposition();
	otarget = otarget || this.getlookat();

	// translate position to target space
	opos.subvector(otarget);

	// rotate around side axis
	m.loadrotationaxis(this._osidevec, math.sin(ftheta * math.pi / 180.0), math.cos(ftheta * math.pi / 180.0));
	opos = m.multiplyvector(opos);

	// translate position out of target space
	opos.addvector(otarget);

	this.setposition(opos);
	this.setdirty(true);
}

proto.yaw = function(ftheta) {
	var m = new canvas3d.matrix3();
	m.loadrotationaxis(this._oupvec, math.sin(ftheta), math.cos(ftheta));
	this._osidevec = m.multiplyvector(this._osidevec);
	this._ooutvec = m.multiplyvector(this._ooutvec);
	this.setdirty(true);
}

// rotate around the camera's up axis with a target center point (uses camera target if otarget is null)
proto.yawaroundtarget = function(ftheta, otarget) {
	var m = new canvas3d.matrix3();
	var opos = this.getposition();
	otarget = otarget || this.getlookat();

	// translate position to target space
	opos.subvector(otarget);

	// rotate around up axis
	m.loadrotationaxis(this._oupvec, math.sin(ftheta * math.pi / 180.0), math.cos(ftheta * math.pi / 180.0));
	opos = m.multiplyvector(opos);

	// translate position out of target space
	opos.addvector(otarget);

	this.setposition(opos);
	this.setdirty(true);
}

// rotate around the camera's out axis with a target center point (uses camera target if otarget is null)
proto.rollaroundtarget = function(ftheta, otarget) {
	var m = new canvas3d.matrix3();
	var opos = this.getposition();
	otarget = otarget || this.getlookat();

	// translate position to target space
	opos.subvector(otarget);

	// rotate around out axis
	m.loadrotationaxis(this._ooutvec, math.sin(ftheta * math.pi / 180.0), math.cos(ftheta * math.pi / 180.0));
	opos = m.multiplyvector(opos);

	// translate position out of target space
	opos.addvector(otarget);

	this.setposition(opos);
	this.setdirty(true);
}

proto.rotatey = function(sine, cosine) {
	var m = new canvas3d.matrix3();
	m.loadrotationy(sine, cosine);
	this._osidevec = m.multiplyvector(this._osidevec);
	this._oupvec   = m.multiplyvector(this._oupvec);
	this._ooutvec  = m.multiplyvector(this._ooutvec);
	this.setdirty(true);
}


proto.lookat = function(p, up) {
	up = up || this._oupvec;
	this._ooutvec  = p.returnsub(this._oposition).unit();

	//this._osidevec = this._ooutvec.cross(new canvas3d.vec3 (0.0, 1.0, 0.0)).unit();
	//this._osidevec = this._ooutvec.cross(this._oupvec).unit();
	this._osidevec = this._ooutvec.cross(up).unit();
	this._oupvec   = this._osidevec.cross(this._ooutvec).unit();
	this._veclookat = p.clone();
	this.setdirty(true);
}

proto.getlookat = function() {
	return this._veclookat;
}

proto.updaterotationmatrix = function() {
	var e0 = this._orotmat.e[0];
	var e1 = this._orotmat.e[1];
	var e2 = this._orotmat.e[2];

	e0[0] = this._osidevec.x;
	e0[1] = this._osidevec.y;
	e0[2] = this._osidevec.z;

	e1[0] = this._oupvec.x;
	e1[1] = this._oupvec.y;
	e1[2] = this._oupvec.z;

	e2[0] = this._ooutvec.x;
	e2[1] = this._ooutvec.y;
	e2[2] = this._ooutvec.z;
}

proto.transformpoint = function(p) {
	var e = this._orotmat.e;
	var opos = this._oposition;

	var e0 = e[0];
	var e1 = e[1];
	var e2 = e[2];

	var vx = p.x - opos.x;
	var vy = p.y - opos.y;
	var vz = p.z - opos.z;

	return new canvas3d.vec3(
		(vx * e0[0] + vy * e0[1] + vz * e0[2]),
		(vx * e1[0] + vy * e1[1] + vz * e1[2]),
		(vx * e2[0] + vy * e2[1] + vz * e2[2])
	);
}

proto.project = function(p) {
	var ffocal = this._ffocal;
	return {
		x: p.x * ffocal / (p.z + this._ffocaldistance) * this._fscale * (this._breversex?-1:1),
		y: -p.y * ffocal / (p.z + this._ffocaldistance) * this._fscale * (this._breversey?-1:1)
	};
}

proto.clip = function(p) {
	if (p.z < 0) {
		return true;
	}
	return false;
}

proto.isbehind = function(p) {
	if (p.z > 0) return false;
	return false;
}

proto.getclipnear = function() {
	return this._iclipnear;
}

proto.getclipfar = function() {
	return this._iclipfar;
}

proto.clip = function(p) {
	if (p.z > this._iclipnear && p.z < this._iclipfar) {
		return false;
	} else {
		return true;
	}
}

proto.setfov = function(ffov) {
	this._ffov = ffov;
	var ffocal = 1 / math.tan(105 * math.pi*math.pi / (180*180 * 2));
	this._ffocal = ffocal;
	this._ffocaldistance = ffocal;
}

proto.getfov = function() {
	return this._ffov;
}

proto.getfocal = function() {
	return this._ffocal;
}

proto.setfocaldistance = function(fvalue) {
	this._ffocaldistance = fvalue;
}

proto.setreversex = function(benable) {
	this._breversex = benable;
}

proto.setreversey = function(benable) {
	this._breversey = benable;
}
